package GUI;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Line2D;
import java.util.ArrayList;

public class DragAndDrop implements MouseMotionListener {
    private static final long REFRESH_INTERVAL_MS = 17;
    public JPanel panel1;
    private Multimap<Integer, Line2D> lineStore;
    private ArrayList<Line2D> lineList;
    private JButton button;
    private boolean dragging = false;
    private int x;
    private int y1;
    private int y2;
    private long nextTime = 0;


    public DragAndDrop(JFrame frame) {
        lineStore = HashMultimap.create();
        lineList = new ArrayList<>();
        button.addMouseMotionListener(this);
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                dragging = true;
                super.mousePressed(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                dragging = false;
                lineStore.put(x, new Line2D.Float(x, y1, x, y2));
                lineList.add(new Line2D.Float(x, y1, x, y2));
                super.mouseReleased(e);
            }
        });

        panel1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                dragging = false;
                lineStore.put(x, new Line2D.Float(x, y1, x, y2));
                lineList.add(new Line2D.Float(x, y1, x, y2));
                super.mouseReleased(e);
            }
        });
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (!dragging) {
            return;
        }
        Graphics2D g2 = (Graphics2D) panel1.getGraphics();
        y1 = e.getY() - 50;
        x = e.getX();
        y2 = e.getY() + 50;
        Line2D lin = new Line2D.Float(x, y1, x, y2);
//        System.out.println(e.getPoint().toString());
        if (this.nextTime < System.currentTimeMillis()) {
            this.nextTime = System.currentTimeMillis() + REFRESH_INTERVAL_MS;
            panel1.paint(g2);
            for (Line2D l : this.lineList) {
                g2.draw(l);
            }
            g2.draw(lin);
        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    private void paint() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(800, 600), null, null, 0, false));
        button = new JButton();
        button.setText("Button");
        panel2.add(button, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel2.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
